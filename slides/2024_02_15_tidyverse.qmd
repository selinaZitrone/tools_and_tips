---
title: "Introduction to the tidyverse"
subtitle: "Scientific workflows: Tools and Tips 🛠️"
author: "Dr. Selina Baldauf"
date: "2024-02-15"
format: 
  revealjs:
    footer: "Selina Baldauf // Tidyverse"
    highlight-style: printing
    mainfont: Cabinet Grotesk
    slide-number: true
    show-slide-number: all
    incremental: true
    self-contained: true
    code-line-numbers: false
    theme: slides.scss
    auto-stretch: false
editor: source
execute: 
  echo: true
  eval: true
  cache: true
  message: false
knitr: 
  opts_chunk: 
    collapse: true
    comment: "#>" 
from: markdown+emoji
---

## What is this lecture series?

### Scientific workflows: Tools and Tips :hammer_and_wrench:

::: nonincremental
:date: Every 3rd Thursday :clock4: 4-5 p.m. :round_pushpin: Webex

-   One topic from the world of scientific workflows
-   Material provided [online](https://selinazitrone.github.io/tools_and_tips/)
-   If you don't want to miss a lecture
    -   [Subscribe to the mailing list](https://lists.fu-berlin.de/listinfo/toolsAndTips)
:::

## What is the tidyverse?


![](images/2024_02_15_tidyverse/tidyverse.png){.top-right width="8%"}


> The tidyverse is an opinionated **collection of R packages** designed for data science. All packages **share** an underlying **design philosophy, grammar, and data structures**.  
[[www.tidyverse.org](https://www.tidyverse.org/)]{.text-small}

. . .

:::{.columns}

:::{.column width="40%"}

:::{.r-stack}

**Tidyverse core packages**

:::

:::

:::{.column width="60%"}

![](images/2024_02_15_tidyverse/core_packages2.png){width="70%"}

:::

:::

## Why the tidyverse?

![](images/2024_02_15_tidyverse/tidyverse.png){.top-right width="8%"}

Basic idea: Make data analysis **efficient** and **intuitive**

- Write code that is easy to **read**, **write** and **maintain**
- More time for **data interpretation**
- Tidyverse is **actively developed** and has a **large community**.

## Today

![](images/2024_02_15_tidyverse/tidyverse.png){.top-right width="8%"}

Overview of 

- most important **packages and functions**
- how they work together in a **data analysis workflow**
- underlying **principles** of the tidyverse

. . .

I can't show you everything. But the tidyverse has an **[excellent documentation](https://www.tidyverse.org/)** and **[cheatsheets](https://posit.co/resources/cheatsheets/)**.

## Which tidyverse packages do you use?

Head over to the menti poll

![](images/2024_02_15_tidyverse/core_packages2.png){width="70%"}

## Data analysis with the tidyverse

::: {.r-stack}
![](images/2024_02_15_tidyverse/workflow-1-import.png){.fragment}

![](images/2024_02_15_tidyverse/workflow-2-tidy.png){.fragment}

![](images/2024_02_15_tidyverse/workflow-3-transform.png){.fragment}

![](images/2024_02_15_tidyverse/workflow-4-visualize.png){.fragment}

![](images/2024_02_15_tidyverse/workflow-5-model.png){.fragment}

![](images/2024_02_15_tidyverse/workflow-6-tibble.png){.fragment}

![](images/2024_02_15_tidyverse/workflow-8-functional.png){.fragment}
:::

:::{.aside}

Image adapted from Wickham & Grolemund: [R for Data Science](https://r4ds.had.co.nz/introduction.html)

:::

## Getting the tidyverse

Install all tidyverse packages with 

```r
install.packages("tidyverse")
```

. . .

Load all core tidyverse packages with 

```{r}
#| message: true
library(tidyverse)
```

. . .

You can also load packages individually - But don't do both!

. . .

Non-core packages need to be loaded individually, e.g.

```r
library(readxl)
```
# Tibbles from `tibble`

> The underlying data structure

![](images/2024_02_15_tidyverse/workflow-6-tibble.png){width="40%" fig-align="right"}


## What are tibbles?

![](images/2024_02_15_tidyverse/tibble.png){.top-right width="8%"}

Tibbles are 

> a **modern reimagining of the data frame**. Tibbles are designed to be (as much as possible) **drop-in replacements** for data frames.
<br>[(Wickham, [Advanced R](https://adv-r.hadley.nz/vectors-chap.html#tibble))]{.text-small}

- Tibbles have the **same basic properties** as data frames

- Everything that you can do with data frames, you can do with tibbles

- Main advantage: Tibbles **print much nicer** to the console

. . .

Have a look at [this book chapter](https://adv-r.hadley.nz/vectors-chap.html#tibble) for a full list of the differences between data frames and tibbles and the advantages of using tibbles.

## How to create tibbles?

![](images/2024_02_15_tidyverse/tibble.png){.top-right width="8%"}

- Tidyverse functions return tibbles by default
- Create with `tibble` function (equivalent to `data.frame`)

## How to create tibbles?

![](images/2024_02_15_tidyverse/tibble.png){.top-right width="8%"}

:::{.columns}

:::{.column width="50%"}

**Creating a tibble**

```{r}
tibble(
  x = 1:26,
  y = letters,
  z = factor(LETTERS)
)
```

:::

:::{.column width="50%"}

**Creating a data frame**

```{r}
data.frame(
  x = 1:26,
  y = letters,
  z = factor(LETTERS)
)
```

:::

:::

# Import data with `readr`

> Read in your files

![](images/2024_02_15_tidyverse/workflow-1-import-small.png){width="30%" fig-align="right"}

## Most important `readr` functions

![](images/2024_02_15_tidyverse/readr.png){.top-right width="8%"}

- `read_csv` to read **comma delimited** files
- `read_tsv` to read **tab delimited** files
- `read_delim` to read files with **any delimiter**

. . .

All `read_*` functions return a `tibble`.

## Example with arctic temperature data

![](images/2024_02_15_tidyverse/readr.png){.top-right width="8%"}

[Data modified from [`lterdatasampler`](https://lter.github.io/lterdatasampler/articles/arc_weather_vignette.html)]{.text-small}

```{r}
#| label: readr-example
#| eval: true
arc_weather <- read_csv(file = "data/arc_weather.csv")
arc_weather
```

## Advantages of `readr`

![](images/2024_02_15_tidyverse/readr.png){.top-right width="8%"}

- Faster than `read.table`/`read.csv`
- Better defaults than base R (e.g. guessing of data types)
- Returns tibbles

- Tidyverse packages for other data types:
  - [`readxl`](https://readxl.tidyverse.org/) for Excel files
  - [`haven`](https://haven.tidyverse.org/) for SPSS, SAS, and Stata files
  - [`googlesheets4`](https://googlesheets4.tidyverse.org/) for Google sheets
  - ...

# Tidy data with `tidyr`

> Reorganize the data

![](images/2024_02_15_tidyverse/workflow-2-tidy-small.png){width="30%" fig-align="right"}

## What is tidy data?

![Illustration from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst](images/2024_02_15_tidyverse/tidydata_1.jpg){width=85%}

## What is non-tidy data?

:::{.columns}

:::{.column width="40%"}

**Tidy**
```{r echo=FALSE}
data.frame(id = 1:6,
  name = c("floof", "max", "cat", "donut", "merlin", "panda"),
  color = c("gray", "black", "orange", "gray", "black", "calico")) |>
  knitr::kable()
```

:::

:::{.column width="60%"}

:::{.fragment}

**Non-tidy**
```{r echo=FALSE}
data.frame(floof = "gray",
  max = "black",
  cat = "orange",
  donut = "gray",
  merlin = "black",
  panda = "calico") |>
  knitr::kable()
```  

<br>
```{r echo=FALSE}
data.frame(gray = c("floof", "donut"),
  black = c("max", "merlin"),
  orange = c("cat", ""),
  calico = c("panda", "")) |>
  knitr::kable()
```  

:::

:::

:::

. . .

Sometimes ***raw data*** is non-tidy because its structure is optimized for data entry or viewing rather than analysis.

## Advantages of tidy data

The main advantages of **tidy** data is that the `tidyverse` packages are built to work with it.

![Illustration from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst](images/2024_02_15_tidyverse/tidydata_3.jpg){width=70%}

## Tidy data with tidyr

![](images/2024_02_15_tidyverse/tidyr.png){.top-right width="8%"}

- `Tidyr` **reorganizes** the data but **does not change** values
- Most important functionality:
  - **Pivoting**: `pivot_longer` and `pivot_wider`
  - **Splitting** and **combining** columns: `separate_wider_delim/position/regex` and `unite`
  - Handle **missing values**: `drop_na`, `replace_na`, `complete`

## Example

![](images/2024_02_15_tidyverse/tidyr.png){.top-right width="8%"}

What is not tidy about our weather data?

```{r}
#| label: tidyr-example
arc_weather
```

- Each row has multiple observations
- Variables are split across multiple columns

## Example

![](images/2024_02_15_tidyverse/tidyr.png){.top-right width="8%"}

This can be solved with `pivot_longer`

```{r}
pivot_longer(arc_weather,
  cols = c(foolik_mean_temp_c, poolik_mean_temp_c))
```

## Example

![](images/2024_02_15_tidyverse/tidyr.png){.top-right width="8%"}

You can also directly name the new columns:

```{r}
arc_weather <- pivot_longer(arc_weather,
  cols = c(foolik_mean_temp_c, poolik_mean_temp_c),
  names_to = "station",
  values_to = "mean_temp_c")
arc_weather
```

# Transform data with `dplyr`

> How to actually change values

![](images/2024_02_15_tidyverse/workflow-3-transform-small.png){width="30%" fig-align="right"}

## Transform data with `dplyr`

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

- Data cleaning, adding new columns, summarizing, ...

- Depending on the data type in combination with
  - `stringr` for character columns
  - `lubridate` for date-time columns
  - `forcats` for factor columns

## Data cleaning and filtering

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

. . .

:::{.columns}

:::{.column width="50%"}

`select` picks variables (columns) based on their names

```{r}
select(arc_weather,
  date, mean_temp_c)
```

:::

:::{.column width="50%"}

:::{.fragment}

`filter` picks observations (rows) based on their values

```{r}
filter(arc_weather,
  station == "foolik_mean_temp_c")
```

:::

:::

:::

## Combine `filter` with other packages

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

. . .

:::{.columns}

:::{.column width="50%"}

`lubridate` to filter by month

```{r}
# Filter rows from May
filter(arc_weather,
  month(date) == 5)
```

:::

:::{.column width="50%"}

:::{.fragment}

`stringr` to filter characters

```{r}
# Filter rows where the station contains "foolik"
filter(arc_weather,
  str_detect(station, "foolik"))
```

:::

:::

:::

## Change and add values

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

Add columns with `mutate`

. . .

```{r}
# Add column with temperature in K
mutate(arc_weather, 
  mean_temp_k = mean_temp_c + 274.15)
```


## Change and add values

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

Change the values of existing columns with `mutate`

. . .

```{r}
# Remove _mean_temp_c from station
arc_weather <- mutate(arc_weather, 
                        station = str_remove(station, "_mean_temp_c"))
arc_weather
```

## Summarize data

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

`summarize` will **collapse the data** to a **single row**

. . .

```{r}
# Calculate the overall mean temperature
summarize(arc_weather, 
            overall_mean = mean(mean_temp_c, na.rm = TRUE))
```

## Summarizing data by group

![](images/2024_02_15_tidyverse/dplyr.png){.top-right width="8%"}

`summarize` in combination with `group_by` will **collapse the data** to a **single row per group**

. . .

```{r}
# Calculate the mean temperature for each station
arc_weather_group <- group_by(arc_weather, station)
summarize(arc_weather_group,
  overall_mean = mean(mean_temp_c, na.rm = TRUE))
```

- `group_by` can be used for any dplyr function to perform the operation by group

## The pipe `|>`

Data transformation often requires **multiple operations** in sequence.

. . .

The pipe operator `|>` helps to keep these operations clear and readable.

- You may also see `%>%` from the `magrittr` package (tidyverse)
- Turn on the native R pipe ` |> ` in **Tools -> Global Options -> Code**

:::{.fragment}

![](images/2024_02_15_tidyverse/native-pipe.png){width=50%}

:::

:::{.aside}

See [here](https://www.tidyverse.org/blog/2023/04/base-vs-magrittr-pipe/) for differences 
between the two pipe versions

:::

## The pipe `|>`

Let's look at an example without the pipe:

```{r}
#| eval: false
arc_weather_group <- group_by(arc_weather, station)
summarize(arc_weather_group, 
          overall_mean = mean(mean_temp_c, na.rm = TRUE))
```

. . .

The pipe operator makes it very easy to combine these operations

```{r}
#| eval: false
arc_weather |>
  group_by(station) |>
  summarize(overall_mean = mean(mean_temp_c, na.rm = TRUE))
```

. . .

You can read from top to bottom and interpret the `|>` as an "*and then do*".

## The pipe `|>`

But what is happening?

The pipe is "pushing" the result of one line into the first argument of the function from the next line.

. . .

```{r eval=FALSE}
arc_weather |>
  group_by(station)

# instead of 
group_by(arc_weather, station)
```

. . .

Piping works perfectly with the `tidyverse` functions because they are designed
to **return a tibble** and **take a tibble as first argument**.

. . .

:::{.callout-tip}
Use the keyboard shortcut ` Ctrl/Cmd + Shift + M ` to insert ` |> `
:::

# Visualize data with `ggplot2`

> Quick exploratory plots and data masterpieces

![](images/2024_02_15_tidyverse/workflow-4-visualize-small.png){width="30%" fig-align="right"}

## A ggplot showcase

![](images/2024_02_15_tidyverse/ggplot2.png){.top-right width="8%"}

<br><br>

:::{.r-stack}

![Visualization by [Jake Kaupp](https://twitter.com/jakekaupp), code available on [Github](https://github.com/jkaupp/tidytuesdays/tree/master/2021/week27)](https://raw.githubusercontent.com/jkaupp/tidytuesdays/master/2021/week27/tw27_plot.png)

:::

## A ggplot showcase

![](images/2024_02_15_tidyverse/ggplot2.png){.top-right width="8%"}

<br>

![Visualizations produced by the [BBC News data team](https://github.com/bbc/bbplot)](https://raw.githubusercontent.com/bbc/bbplot/master/chart_examples/bbplot_example_plots.png)

## A ggplot showcase

![](images/2024_02_15_tidyverse/ggplot2.png){.top-right width="8%"}

![Visualization by [Cédric Scherer](https://twitter.com/CedScherer), code available on [Github](https://github.com/z3tt/TidyTuesday/blob/master/R/2020_31_PalmerPenguins.Rmd)](https://raw.githubusercontent.com/Z3tt/TidyTuesday/master/plots/2020_31/2020_31_PalmerPenguins.png){width=35%}

## Advantages of ggplot

![](images/2024_02_15_tidyverse/ggplot2.png){.top-right width="8%"}

- **Consistent** grammar
- **Flexible** structure allows you to produce any type of plots
- Highly **customizable appearance** (themes)
- Many **extension packages** that provide additional plot types, themes, colors, animation, ...
  - Find a list of ggplot extensions [here](https://exts.ggplot2.tidyverse.org)
- Perfect package for **exploratory data analysis** and **beautiful plots**

## Basic ggplot

```{r}
#| echo: false
theme_set(theme_bw(base_size = 16))
```

![](images/2024_02_15_tidyverse/ggplot2.png){.top-right width="8%"}

Basic idea: Stack layers of the plot on top of each other with `+`

. . .

:::{.columns}

:::{.column width="50%"}

```{r}
#| label: ggplot-example-simple-code
#| eval: false
arc_weather_may <- filter(arc_weather,
  month(date) == 5)
ggplot(data = arc_weather_may,
  aes(
    x = date,
    y = mean_temp_c,
    color = station
)) +
  geom_point()
```

- **aes**thetics define how data variables are mapped onto plot properties
- **geoms** define the type of plot (e.g. points, lines, bars, ...)

:::

:::{.column width="50%"}

```{r}
#| label: ggplot-example-simple-plot
#| output-location: column
#| fig-width: 6.3
#| fig-height: 6.3
#| echo: false
arc_weather_may <- filter(arc_weather,
  month(date) == 5)
ggplot(data = arc_weather_may,
  aes(
    x = date,
    y = mean_temp_c,
    color = station
)) +
  geom_point()
```

:::

:::

## Basic ggplot

![](images/2024_02_15_tidyverse/ggplot2.png){.top-right width="8%"}

- Gplot offers many more customization options and layers
- Works well with the pipe `|>`

. . .

:::{.columns}

:::{.column width="50%"}

```{r}
#| label: ggplot-example-complex-code
#| eval: false
arc_weather |>
  filter(month(date) == 5) |>
  ggplot(aes(
    x = date,
    y = mean_temp_c,
    color = station)) +
  geom_point() +
  geom_smooth() +
  labs(
    title = "Mean temperature in May",
    x = "Date",
    y = "Mean temperature (°C)") +
  scale_color_viridis_d()
```

:::

:::{.column width="50%"}

```{r}
#| label: ggplot-example-complex-plot
#| output-location: column
#| fig-width: 6.3
#| fig-height: 6.3
#| echo: false
arc_weather |>
  filter(month(date) == 5) |>
  ggplot(aes(
    x = date,
    y = mean_temp_c,
    color = station)) +
  geom_point() +
  geom_smooth() +
  labs(
    title = "Mean temperature in May",
    x = "Date",
    y = "Mean temperature (°C)") +
  scale_color_viridis_d() +
  theme_bw(base_size = 16)
```

:::

:::

# Functional programming with `purrr` 

![](images/2024_02_15_tidyverse/workflow-8-functional-small.png){width="50%" fig-align="right"}

## Functional programming with `purrr` 

![](images/2024_02_15_tidyverse/purrr.png){.top-right width="8%"}

- Apply functions to multiple elements of a list/vector/...
  - Replace e.g. for loops/apply-functions
  - Often `purrr` functions are more intuitive
  - See [here](https://purrr.tidyverse.org/articles/base.html) for a full comparison
  between base R functions and purr functions
- Most important function: `map`
  - Comes in different versions, depending on the input and the desired output
  
## A simple example

![](images/2024_02_15_tidyverse/purrr.png){.top-right width="8%"}

Draw 4 numbers from normal distribution with means 1, 2, 3, 4.

. . .

:::{.columns}

:::{.column width="50%"}

**Do it by hand**

```{r}
# Do it by hand
set.seed(123)
rnorm(n = 4, mean = 1, sd = 1)
rnorm(n = 4, mean = 2, sd = 1)
rnorm(n = 4, mean = 3, sd = 1)
rnorm(n = 4, mean = 4, sd = 1)
```

:::

:::{.column width="50%"}

:::{.fragment}

**Use purrr**

```{r}
# Use purrr
set.seed(123)
means <- 1:4
samples <- map(means, rnorm, n = 4, sd = 1)
str(samples)
```

:::

:::

:::

## Different versions of the `map` function

![](images/2024_02_15_tidyverse/purrr.png){.top-right width="8%"}

These are just some examples, there are [many more options](https://purrr.tidyverse.org/articles/base.html):
<br><br>

```{r}
#| echo: false
tibble(
  Output = c("List", "List", "Vector of desired type", "Vector of desired type", "Data frame", "Data frame"),
  Input = c("1 Vector", "2 Vectors", "1 Vector", "2 Vectors", "1 Vector", "2 Vectors"),
  `Purr function` = c("map", "map2", "map_lgl", "map2_lgl", "map_df", "map2_df")
) |>
  knitr::kable()

```


## A more complex example

![](images/2024_02_15_tidyverse/purrr.png){.top-right width="8%"}

Read in and analyse multiple files with the same structure at once.

```{r}
#| eval: false
# Step 1: List all files in your data directory
paths <- list.files("data")
```
```{r}
#| echo: false
# Step 1: List all files in your data directory
paths <- list.files(here::here("slides/data"), pattern = "oolik")
paths
paths <- list.files(here::here("slides/data"), pattern = "oolik", full.names = TRUE)
```

. . .

```{r}
#| label: purrr-example-read
#| output-location: column
# Step 2: Read all files into a list of tibbles
arc_weather_files <- map(paths, read_csv)
arc_weather_files
```

## A more complex example

![](images/2024_02_15_tidyverse/purrr.png){.top-right width="8%"}

Read in and analyse multiple files with the same structure at once.

```{r}
# Step 3: Apply a linear model to each station file,
# get the model summary of each model and extract the coefficients
arc_weather_files |>                             # Take the data
  map(\(x) lm(mean_temp_c ~ date, data = x)) |>  # Apply the same model to every tibbel in the list
  map(summary) |>                                # Get the model summary of both models
  map_dbl("r.squared")                           # Extract the r-squared from the model summaries
```

## Summary

![](images/2024_02_15_tidyverse/workflow-complete.png)

## Summary

Tidyverse makes data analysis 

- efficient
- intuitive
- consistent

. . .

Tidyverse code is more **readable** and **easier to write & maintain**.

. . .

This facilitates

📚 Learning <br>

. . .

🤝 Collaboration <br>

. . .

🔄 Reproducible research <br>

## Summary

Where to get started with the tidyverse?

- Check out the [lecture website](https://selinazitrone.github.io/tools_and_tips/sessions/08_tidyverse.html#further-links-and-resources) for links to documenation, cheatsheets and book

![[Illustration from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst]{.text-small}](images/2024_02_15_tidyverse/friends_with_tidy_data.jpg){width="60%" fig-alt="Digital illustration of two cute fuzzy monsters sitting on a park bench with a smiling data table between them, all eating ice cream together. In text above the illustration are the hand drawn words \"make friends with tidy data.\""}


## Next lecture

Semester break in March!

#### Topic t.b.a.

<br>

:date: 18th April :clock4: 4-5 p.m. :round_pushpin: Webex

:bell: [Subscribe to the mailing list](https://lists.fu-berlin.de/listinfo/toolsAndTips)

:e-mail: For topic suggestions and/or feedback [send me an email](mailto:selina.baldauf@fu-berlin.de)

## Thank you for your attention :) {background-image="images/2024_02_15_tidyverse/complete_analysis_monsters.jpg" background-size="contain" background-color="white"}

Questions?<br>

:::{.aside}
[Illustration from the [Openscapes](https://www.openscapes.org/) blog [*Tidy Data for reproducibility, efficiency, and collaboration*](https://www.openscapes.org/blog/2020/10/12/tidy-data/) by Julia Lowndes and Allison Horst]{.text-small}
:::

## References

:::{.nonincremental}

- [Tidyverse website](https://www.tidyverse.org/): find links to all package documentations
- [Cheatsheets](https://posit.co/resources/cheatsheets/)
- [R for Data Science](https://r4ds.had.co.nz/introduction.html) book: Learn data analysis with the tidyverse

:::