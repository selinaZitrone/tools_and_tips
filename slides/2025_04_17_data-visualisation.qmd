---
title: "Clear figures,<br> stronger stories"
subtitle: "Scientific workflows: Tools and Tips 🛠️"
author: "Dr. Selina Baldauf"
date: "2025-04-17"
format: 
  revealjs:
    footer: "Selina Baldauf // Fundamentals of Data Visualization"
    highlight-style: printing
    mainfont: Cabinet Grotesk
    slide-number: true
    show-slide-number: all
    incremental: true
    self-contained: true
    code-line-numbers: false
    theme: slides.scss
    auto-stretch: false
editor: source
execute: 
  echo: false
  eval: true
  cache: true
  message: false
knitr: 
  opts_chunk: 
    collapse: true
    comment: "#>" 
from: markdown+emoji
---

```{r}
#| label: setup
#| include: false
#| cache: false

# load packages
library(ggplot2)
library(dplyr)
library(forcats)
library(tidyr)
library(patchwork)
library(gapminder)
```

```{r}
#| label: create-basic-plot-theme
okabe_ito <- okabe_ito <- c(
  "#E69F00",
  "#56B4E9",
  "#009E73",
  "#F0E442",
  "#0072B2",
  "#D55E00",
  "#CC79A7"
)

theme_slideshow <- function(
    base_size = 11,
    base_family = "sans",
    text_color = "#333333") {
  # Start with theme_minimal as a base
  theme_minimal(base_size = base_size, base_family = base_family) %+replace%
    theme(
      # Text elements
      text = element_text(color = text_color, family = base_family),
      plot.title = element_text(
        size = base_size * 1.5,
        face = "bold",
        hjust = 0.5,
        margin = margin(b = 15)
      ),
      plot.subtitle = element_text(
        size = base_size * 1.1,
        hjust = 0.5,
        margin = margin(b = 10)
      ),
      plot.caption = element_text(
        size = base_size * 0.8,
        hjust = 1,
        margin = margin(t = 10)
      ),

      # Axis elements
      axis.title = element_text(size = base_size * 1.1, face = "bold"),
      axis.text = element_text(size = base_size),

      # Legend elements
      legend.title = element_text(size = base_size, face = "bold"),
      legend.text = element_text(size = base_size * 0.9),
      legend.key.size = unit(1, "cm"),

      # Panel elements
      panel.grid.minor = element_blank(),
      strip.text = element_text(size = base_size * 1.3)
    )
}
```


## What is this lecture series?

### Scientific workflows: Tools and Tips :hammer_and_wrench:

::: nonincremental

:date: Every 3rd Thursday :clock4: 4-5 p.m. :round_pushpin: Webex

-   One topic from the world of scientific workflows
-   Material provided [online](https://selinazitrone.github.io/tools_and_tips/)
-   If you don't want to miss a lecture
    -   [Subscribe to the mailing list](https://lists.fu-berlin.de/listinfo/toolsAndTips)

:::

## Motivation

![Annual changes in Arctic sea ice cover by [Derek Watkins (New York Times)](https://www.nytimes.com/interactive/2015/03/24/science/earth/arctic-ice-low-winter-maximum.html?_r=0)](images/2025_04_17_data-visualisation/nyt_ice_cover.png){fig-alt="A line graph of the annual changes in Arctic sea ice cover by Derek Watkins (New York Times). Every line represents one year and it becomes clear how big changes from 2010 to 2014 were."}

## Before we get started

Main books that I used (free):

:::{.columns}

:::{.column width="50%"}

![[Healy, K. (2018). Data Visualization: A Practical Introduction. Princeton University Press.](https://socviz.co/index.html#preface)](images/2025_04_17_data-visualisation/healy_book.png){width="50%" fig-alt="Book cover of Healy, K. (2018). Data Visualization: A Practical Introduction. Princeton University Press."}

:::

:::{.column width="50%"}

![[Wilke, C. O. (2019). Fundamentals of Data Visualization. O'Reilly Media.](https://clauswilke.com/dataviz/)](images/2025_04_17_data-visualisation/wilke_book.png){width="50%" fig-alt="Book cover of Wilke, C. O. (2019). Fundamentals of Data Visualization. O'Reilly Media."}

:::

:::

## What makes a good figure?


- **Correct and transparent** <br>Truthful representation of the data, data integrity
- **Useful** <br>Supports the main point you want to make
- **Easy to read  and understand**	<br>Accessible for everyone
- **Beautiful** <br>Visually interesting and pleasing
- **Appropriate** <br>Different outlets have different requirements/freedoms

# 7 steps for better figures

# 👣 1: Consider the context

## Consider the context

- **Who** is your **audience**?
  - How familiar are they with the topic?
- **What** are **common practices** in your field?
  - Plot types, colors, ...
- **Where** do you present your figure?
  - Different contexts require different designs
  - How much time do readers spend on a figure?

## Contexts in science

| Context |  Things to consider                                                                                                                                            | 
| ------- |  ---------------------------------------------------------------------------------------------------------------------------------------------------------- |  
| Paper   |  - Journal requirements<br>- Usually read on PC<br>- Print out in B/W → No zoom <br> - More time → Higher complexity                                                                              |  
| Poster  |  - More open design choice<br>- Attract people from far<br>- You quickly lose people to other posters <br> - More time → Medium complexity                                                         |  
| Talk    |  - You can use animations to guide through<br>- Little time → less complex                                                             |  

# 👣 2: Make your data transparent

## Don't hide data behind summaries

```{r}
#| label: create-datasaurus-plot
#| include: false

# calculate datasaurus summary stats
# Create a scatter plot using ggplot2 showing the datasaurus figures
sum_stats <- datasauRus::datasaurus_dozen |>
  group_by(dataset) |>
  summarise(mean_x = mean(x), mean_y = mean(y))

# Create scatter plot of data saurus without summary statistics
plot_datasaurus_basic <- datasauRus::datasaurus_dozen |>
  ggplot(aes(x = x, y = y)) +
  geom_point(size = 1) +
  facet_wrap(~dataset, ncol = 4) +
  labs(
    title = "Datasaurus Dozen: Different distributions, same statistics",
    caption = "Data from the `datasauRus` package based on Matejka, J., & Fitzmaurice, G. (2017). Same Stats, Different Graphs."
  )

# Create scatter plot of data saurus with summary statistics
plot_datasaurus_stats <-
  plot_datasaurus_basic +
  geom_smooth(method = "lm", se = FALSE) +
  geom_point(
    data = sum_stats,
    aes(x = mean_x, y = mean_y),
    color = "orange",
    size = 5,
    shape = 18
  )
```

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: show-fig-datasaurus-basic
#| cache: true
#| fig-width: 10
#| fig-height: 5.63
#| out-width: "100%"
#| out-height: "100%"

# add theme
plot_datasaurus_basic <- plot_datasaurus_basic +
  theme_minimal() +
  theme(
    axis.title = element_blank(),
    strip.text = element_blank(),
    panel.grid.major = element_blank()
  )


# display the plot
print(plot_datasaurus_basic)
```

## Don't hide data behind summaries

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: show-fig-datasaurus-stats
#| cache: true
#| fig-width: 10
#| fig-height: 5.63
#| out-width: "100%"
#| out-height: "100%"
plot_datasaurus_stats <- plot_datasaurus_stats +
  theme_minimal() +
  theme(
    axis.title = element_blank(),
    strip.text = element_blank(),
    panel.grid.major = element_blank()
  )

# display the plot
print(plot_datasaurus_stats)
```

## Don't hide data behind summaries

Simple bar graphs hide a lot of information about the data.

![[https://doi.org/10.1371/journal.pbio.1002128](https://doi.org/10.1371/journal.pbio.1002128)](images/2025_04_17_data-visualisation/beyond_bar_paper.png)

## Don't hide data behind summaries

Same bar plot - different data & statistical test results

![Figure 1 from [Weissgerber et al. 2015](https://doi.org/10.1371/journal.pbio.1002128)](images/2025_04_17_data-visualisation/beyond_bar_paper_tests.png
){width="70%"}

## Alternatives to bar plots

Bar plots only show mean ± SE/SD.

```{r}
#| label: generate-barplot-data
#| cache: false

set.seed(42) # for reproducibility

# Category A: Many data points, symmetric distribution (normal)
n_A <- 50
catA <- data.frame(
  category = "Group A",
  value = rnorm(n_A, mean = 50, sd = 5)
)

# Category B: Data points with outliers
n_B <- 50
catB <- data.frame(
  category = "Group B",
  value = c(rnorm(45, mean = 50, sd = 5), rnorm(5, mean = 80, sd = 2))
)

# Category C: Bimodal distribution
n_C <- 50
catC <- data.frame(
  category = "Group C",
  value = c(rnorm(n_C / 2, mean = 40, sd = 4), rnorm(n_C / 2, mean = 60, sd = 4))
)

# Category D: Few data points
n_D <- 5
catD <- data.frame(
  category = "Group D",
  value = rnorm(n_D, mean = 55, sd = 5)
)

# Combine all data
data_all <- bind_rows(catA, catB, catC, catD)
data_all$category <- factor(data_all$category, levels = c("Group A", "Group B", "Group C", "Group D"))

# Create the basic bar plot
# First create summary data
summary_stats <- data_all %>%
  group_by(category) %>%
  summarize(
    mean_val = mean(value),
    se = sd(value) / sqrt(n())
  )

# make bar plot
barplot_errors <- ggplot(summary_stats, aes(x = category, y = mean_val, fill = category)) +
  geom_errorbar(aes(ymin = mean_val - se, ymax = mean_val + se), width = 0.2) +
  geom_col(width = 0.6) +
  scale_fill_brewer(palette = "Set2")

# Make box plot
boxplot_groups <- ggplot(
  data_all,
  aes(
    x = category,
    y = value
  )
) +
  # Add boxplot (narrow width) nudged to left
  geom_boxplot(
    aes(color = category),
    fill = "transparent",
    size = 1
  ) +
  scale_fill_brewer(palette = "Set2") +
  scale_color_brewer(palette = "Set2")

# Make boxplot with points
boxplot_groups_points <- ggplot(
  data_all,
  aes(
    x = category,
    y = value,
    color = category
  )
) +
  # Add boxplot (narrow width) nudged to left
  geom_boxplot(
    aes(color = category),
    outlier.shape = NA,
    fill = "transparent",
    size = 1
  ) +
  geom_point(position = position_jitter(width = 0.1), alpha = 0.7) +
  scale_fill_brewer(palette = "Set2") +
  scale_color_brewer(palette = "Set2")
```


```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: print-barplot-1
#| cache: true

# add theme
barplot_errors <- barplot_errors +
  theme_minimal() +
  theme(
    axis.line.x = element_line(),
    axis.title = element_blank(),
    panel.grid.major.x = element_blank(),
    legend.position = "none"
  )
# print plot
barplot_errors
```

## Alternatives to bar plots

A box plot is already better (shows more of the distribution)

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: print-boxplot
#| cache: true

boxplot_groups <- boxplot_groups +
  theme_minimal() +
  theme(
    panel.grid.major.x = element_blank(),
    axis.line.x = element_line(),
    legend.position = "none",
    axis.title = element_blank(),
    axis.line.y = element_blank()
  )

boxplot_groups
```


## Alternatives to bar plots

A box plot is already better (shows more of the distribution)

```{r}
#| label: anatomy-of-boxplot
# Create sample data with a clear distribution
set.seed(123)
data <- data.frame(
  value = c(rnorm(100, mean = 10, sd = 2)),
  group = "Example"
)

# Calculate key statistics for annotations
stats <- summary(data$value)
iqr <- IQR(data$value)
outlier_upper <- stats[5] + 1.5 * iqr
outlier_lower <- stats[2] - 1.5 * iqr

# Create the explanatory boxplot
boxplot_anatomy <- ggplot(data, aes(x = group, y = value)) +
  geom_boxplot(width = 0.3, outlier.size = 3, size = 1) +
  # Add annotation lines and text
  annotate("text", x = 1.4, y = stats[6], label = "Maximum (excluding outliers)", hjust = 0) +
  annotate("text", x = 1.4, y = stats[5], label = "75th percentile (Q3)", hjust = 0) +
  annotate("text", x = 1.4, y = stats[3], label = "Median", hjust = 0) +
  annotate("text", x = 1.4, y = stats[2], label = "25th percentile (Q1)", hjust = 0) +
  annotate("text", x = 1.4, y = stats[1], label = "Outlier", hjust = 0) +
  # Add lines pointing to each component
  annotate("segment",
    x = 1.3, xend = 1.2,
    y = c(stats[1], stats[2], stats[3], stats[5], stats[6]),
    yend = c(stats[1], stats[2], stats[3], stats[5], stats[6])
  ) +
  # Add IQR explanation
  annotate("text",
    x = 0.5, y = mean(c(stats[2], stats[5])),
    label = "IQR\n(Inter Quartile\nRange)", hjust = 0.5
  ) +
  # Customize theme
  theme_void() +
  theme(
    axis.text.x = element_blank(),
    panel.grid.major.x = element_blank()
  ) +
  coord_cartesian(xlim = c(0.7, 2.5)) # Adjust plot width to fit annotations
boxplot_groups + boxplot_anatomy &
  theme(
    # ttransparent background
    panel.background = element_rect(fill = "transparent", color = NA),
    plot.background = element_rect(fill = "transparent", color = NA)
  )
```

## Alternatives to bar plots

Add raw data points to increase the information content of the plot

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: print-boxplot-with-points
#| cache: true

boxplot_groups_points <- boxplot_groups_points +
  theme_minimal() +
  theme(
    legend.position = "none",
    axis.title = element_blank(),
    axis.line.y = element_blank(),
    axis.line.x = element_line()
  )

boxplot_groups_points
```


## Alternatives to bar plots

**Raincloud plots** show raw data points, summary statistics, and distribution

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: print-raincloud-plot
#| cache: true

# Create raincloud plot
raincloud_plot <- ggplot(
  data_all,
  aes(
    x = category,
    y = value
  )
) +
  # Add boxplot (narrow width) nudged to left
  geom_boxplot(
    aes(color = category),
    width = 0.1, outlier.shape = NA,
    fill = "transparent"
  ) +
  # Add half-eye (density layer) from ggdist
  ggdist::stat_halfeye(
    aes(fill = category),
    adjust = 0.5,
    width = 0.6,
    justification = -0.2,
    .width = 0,
    point_colour = NA
  ) +
  # Add half-points (raw data) using gghalves on the left
  gghalves::geom_half_point(
    aes(color = category),
    side = "l",
    range_scale = 0.4,
    size = 2,
    position = position_nudge(x = -0.01)
  ) +
  scale_fill_brewer(palette = "Set2") +
  scale_color_brewer(palette = "Set2")

raincloud_plot <- raincloud_plot +
  theme_minimal() +
  theme(
    axis.line.x = element_line(),
    panel.grid.major.x = element_blank(),
    legend.position = "none",
    axis.title = element_blank(),
    axis.line.y = element_blank()
  )

raincloud_plot
```

## Principle of proportional ink

**Sizes of shaded areas** should be **proportional** to the **data values** they represent

. . .

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: barplots-start-at-zero
#| fig-width: 10
#| fig-height: 2.2
#| out-width: "100%"
#| out-height: "100%"
#| cache: true

# Create a simple dataset with two groups and their values
data <- data.frame(
  group = rep(c("Group A", "Group B"), 1),
  value = c(80, 90) # Values are close but slightly different
)

# Create a function to generate a bar plot with a specified y-axis minimum using coord_cartesian
create_bar_plot <- function(data, y_min) {
  ggplot(data, aes(x = group, y = value, fill = group)) +
    geom_bar(stat = "identity", width = 0.6) +
    scale_fill_manual(values = c("steelblue", "darkred")) +
    scale_y_continuous(breaks = c(0, 25, 50, 75, 100), labels = scales::label_percent(scale = 1)) +
    coord_cartesian(ylim = c(y_min, 100), expand = FALSE)
}

# Create three plots with different y-axis starting points
plot1 <- create_bar_plot(data, 0)
# plot2 <- create_bar_plot(data, 25)
# plot3 <- create_bar_plot(data, 50)
plot4 <- create_bar_plot(data, 75)

# Use patchwork to arrange the plots in multiple panels
plot1 + plot4 + plot_layout(nrow = 1, axis_titles = "collect") &
  theme_minimal() +
    theme(
      panel.packground = element_rect(fill = "grey70"),
      axis.title = element_blank(),
      axis.text.x = element_blank(),
      legend.position = "none",
      axis.text = element_text(size = 10),
      panel.grid.major.x = element_blank(),
      panel.grid.minor.y = element_blank(),
      panel.grid.major.y = element_line(color = "grey99")
    )
```

Here: bar length does not represent **relative data proportions** anymore 

. . .

<div style="font-size:1.5em; text-align: center; margin-bottom: 1em;">  
  Always start bar plots at 0!  
</div>  


:::{.aside}

Bergstrom and West (2016)

:::

## Principle of proportional ink

Other plot types don't have to start at 0.

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: proportional-ink
#| cache: true
recent_data <- gapminder |>
  filter(year == max(year)) |>
  group_by(continent) |>
  summarize(life_expectancy = mean(lifeExp)) |>
  mutate(continent = as.character(continent))

# Create a bar chart that starts the y-axis at 0
bar_chart <- ggplot(
  recent_data,
  aes(x = continent, y = life_expectancy)
) +
  geom_bar(stat = "identity", width = 0.6) +
  coord_cartesian(ylim = c(0, 85)) +
  labs(title = "Allows for relative comparisons")

# Create a point chart with a truncated y-axis (not starting at 0)
point_chart <- ggplot(
  recent_data,
  aes(x = continent, y = life_expectancy)
) +
  geom_point(size = 5) +
  coord_cartesian(
    ylim = c(
      min(recent_data$life_expectancy) - 2,
      max(recent_data$life_expectancy) + 2
    )
  ) +
  labs(title = "Focus on the absolute differences")
# Combine the two plots vertically
combined_plot <- bar_chart + point_chart + plot_layout(ncol = 2, axis_titles = "collect") +
  plot_annotation(
    title = "Life Expectancy by Continent (2007)",
    caption = "Data from the `gapminder` R package"
  ) &
  scale_y_continuous(expand = c(0.01, 0.01)) &
  theme_minimal() +
    theme(
      axis.line.x = element_line(),
      axis.ticks.x = element_line(),
      axis.title.x = element_blank()
    ) &
  labs(
    y = "Life Expectancy (years)"
  )

print(combined_plot)
```

# 👣 3: Choose the right chart type

## Choose the right chart type

There are so many chart types - and cool tools to explore them

:::{.columns}

:::{.column width="50%"}
![[From data vo viz](https://www.data-to-viz.com/ )](images/2025_04_17_data-visualisation/data_to_vis.png){width="50%"}
:::

:::{.column width="50%"}

![[The dataviz project](https://datavizproject.com/)](images/2025_04_17_data-visualisation/datavis_100.png){width="50%"}

:::

:::

## Different channels - different accuracy

![](images/2025_04_17_data-visualisation/different_channels.png)

- Accuracy of judgement decreases from left to right
- More accurate judgements vs. more generic judgements

## Different channels - different accuracy

- Combine multiple channels for more accuracy
- Add numbers to increase accuracy of judgement

```{r, dev='svg', dev.args=list(bg="transparent")}  
#| label: compare-lollipot-pie
#| cache: true
# Calculate species counts and order the species by count descending
penguin_counts <- palmerpenguins::penguins |>
  count(species) |>
  ## add percentage label with `scales::percent()`
  dplyr::mutate(
    percentage = scales::percent(n / sum(n), accuracy = .1, trim = FALSE)
  ) |>
  # add labels for the piechart with the species
  mutate(
    percentage_with_species = paste(species, percentage)
  ) |>
  # Order species by count descending
  mutate(species = fct_reorder(species, n))

# Make a lollipop plot
lollipop_chart <- ggplot(
  penguin_counts,
  aes(x = species, y = n, color = species)
) +
  # Add segment lines
  geom_segment(
    aes(x = species, xend = species, y = 0, yend = n, color = species),
    linewidth = 2
  ) +
  # Add points
  geom_point(size = 6) +
  geom_text(
    aes(label = percentage),
    size = 5,
    fontface = "bold",
    hjust = 1.5,
    vjust = -1
  ) +
  scale_color_manual(values = okabe_ito) +
  labs(
    title = "Position + Length + Text",
    caption = "Number of 3 penguin species in Antarctica in the `palmerpenguins` dataset",
    y = "Count"
  ) +
  coord_flip() +
  scale_y_continuous(expand = c(0.03, 0.03)) +
  theme_minimal() +
  theme(
    axis.line.y = element_blank(),
    panel.grid.major.y = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_text(hjust = 1),
    plot.title = element_text(size = 12, face = "bold", hjust = 0.5),
    legend.position = "none"
  )

# Combine the two plots
lollipop_chart
```

# 👣 4. Focus on the core message

## Focus on the core message

- The readers attention is limited: **be concise**
- Think about the **main message** you want to convey
  - Which variables do you need?
  - What can you omit?

## Arrange your plot

Arrange your plot so that it's **easy to extract** the main message

. . .

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: arrange-plots
#| cache: false
gap_data_asia_europ <- gapminder %>%
  filter(continent %in% c("Europe", "Asia")) %>%
  group_by(year, continent) %>%
  summarise(
    mean_life_exp = mean(lifeExp),
    .groups = "drop"
  )

# Create grouped bar plot
p_grouped <- ggplot(
  gap_data_asia_europ,
  aes(x = factor(year), y = mean_life_exp, fill = continent)
) +
  geom_col(position = "dodge", width = 0.8) +
  labs(
    title = "Life Expectancy group comparisons",
    subtitle = "Main message: Europe higher than Asia, Asia catching up",
    x = "Year",
    y = "Mean Life Expectancy (years)",
    fill = "Continent"
  ) +
  theme_minimal()


# Create small multiples version
p_faceted <- ggplot(
  gap_data_asia_europ,
  aes(x = factor(year), y = mean_life_exp, fill = continent)
) +
  geom_col(width = 0.8) +
  facet_wrap(~continent) +
  labs(
    title = "Life Expectancy Trends",
    subtitle = "Main message: Different rates of improvement over time",
    y = "Mean Life Expectancy (years)",
    fill = "Continent"
  ) +
  theme_minimal() +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1)
  )


p_grouped + p_faceted +
  plot_layout(guides = "collect", axis_titles = "collect", ncol = 2) &
  scale_fill_manual(values = okabe_ito) &
  scale_y_continuous(expand = c(0.01, 0.05)) &
  theme(
    axis.title.x = element_blank(),
    panel.grid.major.x = element_blank(),
    axis.line.y = element_blank(),
    legend.title = element_blank(),
    strip.placement = "inside",
    legend.position = "bottom",
    # transparent background
    plot.background = element_rect(fill = "transparent", color = NA),
    panel.background = element_rect(fill = "transparent", color = NA)
  )
```


## Choose a good plot type

Different plot types tell different stories

. . .

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: life-expectancy-story
#| cache: false
# Data for the dumbbell plot needs each year with two measures (one for each continent)
gap_wide <- gap_data_asia_europ %>%
  pivot_wider(names_from = continent, values_from = mean_life_exp)

### Plot One: Dumbbell Plot
# Create dumbbell plot

p_dumbbell <- ggplot(gap_wide, aes(x = year)) +
  # Create vertical segments for each year connecting the points
  geom_segment(
    aes(x = year, xend = year, y = Asia, yend = Europe),
    color = "gray50",
    size = 1
  ) +
  # Plot the points for Africa (left lower value)
  geom_point(aes(y = Asia), color = okabe_ito[1], size = 3.5) +
  # Plot the points for Europe (upper value)
  geom_point(aes(y = Europe), color = okabe_ito[2], size = 3.5) +
  labs(
    title = "Highlight distance/difference"
  )

### Plot Two: Side-by-Side Line Charts
# Here we plot separate line charts for Africa and Europe, revealing the trends over time in each facet.
p_line <- ggplot(
  gap_data_asia_europ,
  aes(x = year, y = mean_life_exp, color = continent)
) +
  geom_line(size = 1) +
  geom_point(size = 2) +
  labs(
    title = "Highlight trends"
  )

# Display the plots one after the other
p_dumbbell + p_line + plot_layout(axis_titles = "collect") +
  plot_annotation(
    caption = "Data from the `gapminder` package"
  ) &
  scale_color_manual(values = okabe_ito) &
  theme_minimal() &
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.title.x = element_blank(),
    legend.title = element_blank(),
    panel.grid.minor = element_blank()
  ) &
  labs(
    y = "Mean Life Expectancy (years)"
  )
```

## Keep it simple

**Don't overcomplicate** your figures and bury your message



What is the main message here?

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: expectancy-complex
#| cache: false

gapminder |>
  ggplot(aes(x = gdpPercap, y = lifeExp, color = continent)) +
  geom_point(aes(size = pop), alpha = 0.7) +
  geom_smooth(
    method = "lm",
    se = FALSE
  ) +
  scale_x_log10(labels = scales::label_number(scale = 1, accuracy = 1)) +
  scale_size_continuous(
    labels = scales::label_number(scale = 1 / 1e6, suffix = " Mio")
  ) +
  labs(
    x = "GDP per Captia ($)",
    y = "Mean Life Expectancy (years)",
    size = "Population size",
    color = "Continent"
  ) +
  scale_color_manual(values = okabe_ito) +
  theme_minimal() +
  theme(
    legend.position = "right"
  )
```

## Keep it simple

**Don't overcomplicate** your figures and bury your message

- Distributions of life expectancy and GDP relative to world average

. . .

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: expectancy-simplified
#| cache: false

# look only at the data from the last year
gapminder_last_year <- gapminder |>
  filter(year == max(gapminder$year))

mean_lifeExp <- mean(gapminder_last_year$lifeExp, na.rm = TRUE)
mean_gdpPercap <- mean(gapminder_last_year$gdpPercap, na.rm = TRUE)
min_lifeExp <- min(gapminder_last_year$lifeExp, na.rm = TRUE)
max_lifeExp <- max(gapminder_last_year$lifeExp, na.rm = TRUE)
min_gdpPercap <- min(gapminder_last_year$gdpPercap, na.rm = TRUE)
max_gdpPercap <- max(gapminder_last_year$gdpPercap, na.rm = TRUE)

# gdp
life <- gapminder |>
  ggplot(aes(x = lifeExp, y = continent, fill = continent, color = continent)) +
  scale_x_log10(labels = scales::label_comma()) +
  ggridges::geom_density_ridges(alpha = 0.5, linewidth = 1) +
  geom_vline(xintercept = mean_lifeExp) +
  annotate(
    "text",
    x = mean_lifeExp + 1,
    y = 6.5,
    label = paste(c("Mean: ", round(mean_lifeExp, 1), " years"), collapse = ""),
    size = 4,
    hjust = 1.1
  ) +
  theme(
    panel.grid.major.y = element_blank()
  ) +
  labs(
    x = "Life Expectancy (years)"
  )

# gdp
gdp <- gapminder |>
  ggplot(aes(x = gdpPercap, y = continent, fill = continent, color = continent)) +
  ggridges::geom_density_ridges(alpha = 0.7, linewidth = 1) +
  geom_vline(xintercept = mean_gdpPercap) +
  annotate(
    "text",
    x = mean_gdpPercap + 1,
    y = 6.5,
    hjust = 1.1,
    label = paste(c("Mean: ", format(round(mean_gdpPercap, 0), big.mark = ","), "$"), collapse = ""),
    size = 4
  ) +
  scale_x_log10(labels = scales::label_comma()) +
  scale_fill_manual(values = okabe_ito) +
  labs(
    x = "GDP per Capita (log scale)"
  )

life + gdp + plot_layout(axis_titles = "collect") &
  scale_fill_manual(values = okabe_ito) &
  scale_color_manual(values = okabe_ito) &
  theme_minimal() &
  theme(
    axis.title.y = element_blank(),
    legend.position = "none",
    panel.grid.major.y = element_blank()
  )
```

# 👣 5. Consider the trip

## Reading a figure is a timely experience

- We look at elements **step by step** before we come back to understand the **figure as a whole**
- Try to put yourself in the readers shoes
  - What will they look at first, second, etc.?
  - **How many steps** does it take to understand all the elements?
  
. . .

**Goal**: Make the trip as short as possible

## Consider the trip

A story about the GDP China and India

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: no-highlight-countries
#| cache: false
# Highlight the development of China and India in comparison to other countries
gapminder_china_india <- gapminder |>
  filter(continent == "Asia") |>
  mutate(highlight = case_when(
    country %in% "China" ~ "China",
    country %in% "India" ~ "India",
    .default = "Rest of Asia"
  ))

# define highlight colors
highlight_colors <- c("China" = okabe_ito[1], "India" = okabe_ito[2], "Rest of Asia" = "grey70")

# calculate average gdp
avg_gdp <- gapminder_china_india |>
  filter(year == max(year)) |>
  pull(gdpPercap) |>
  mean() |>
  round(0)

barplot_no_highlights <- gapminder_china_india |>
  filter(year == max(year)) |>
  ggplot(aes(x = reorder(country, gdpPercap), y = gdpPercap)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  scale_fill_manual(values = highlight_colors) +
  theme_minimal() +
  labs(
    y = "GDP per Capita ($)",
    title = "China and India still below average GDP"
  ) +
  annotate(
    "text",
    x = 2.5,
    y = avg_gdp + 2000,
    label = paste(c("Mean: ", format(avg_gdp, big.mark = ","), "$"), collapse = ""),
    size = 4
  ) +
  geom_hline(yintercept = avg_gdp) +
  scale_y_continuous(expand = c(0.01, 0.01)) +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.text.x = ggtext::element_markdown(angle = 90, hjust = 1, vjust = 0.5),
    panel.grid.major.x = element_blank()
  )
barplot_no_highlights
```


## Rotate your plot

Reading labels upside down is a neck rotation - very annoying

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: rotate-barplot
#| cache: false

barplot_no_highlights_rotate <- gapminder_china_india |>
  filter(year == max(year)) |>
  ggplot(aes(x = reorder(country, gdpPercap), y = gdpPercap)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  scale_fill_manual(values = highlight_colors) +
  theme_minimal() +
  labs(
    y = "GDP per Capita ($)",
    title = "China and India still below average GDP"
  ) +
  annotate(
    "text",
    x = 2,
    y = avg_gdp + 3200,
    label = paste(c("Mean:", format(avg_gdp, big.mark = ","), "$"), collapse = ""),
    size = 4
  ) +
  geom_hline(yintercept = avg_gdp) +
  scale_y_continuous(expand = c(0, 0.01)) +
  coord_flip() +
  theme_minimal() +
  theme(
    axis.title.y = element_blank(),
    panel.grid.major.y = element_blank(),
    axis.line.x = element_line(),
    axis.ticks.x = element_line()
  )

barplot_no_highlights_rotate
```

## Highlight the main message

Use <span style="color: #4169E1; font-size: 120%; font-weight: bold;">highlighting</span> and <span style="color: #4d4d4d; font-size: 100%;">de-emphasizing</span>

. . .
  
<div style="border: 2px solid #ccc; padding: 0.5em; border-radius: 4px;"><span style="color: #4d4d4d; font-size: 100%;">Effective visualization helps us understand data quickly. </span><span style="color: #4169E1; font-size: 120%; font-weight: bold;">Patterns</span><span style="color: #4d4d4d; font-size: 100%;"> emerge naturally, while </span><span style="color: #4169E1; font-size: 120%; font-weight: bold;">colors</span><span style="color: #4d4d4d; font-size: 100%;"> enhance meaning. Good </span><span style="color: #4169E1; font-size: 120%; font-weight: bold;">design</span><span style="color: #4d4d4d; font-size: 100%;"> choices and proper </span><span style="color: #4169E1; font-size: 120%; font-weight: bold;">emphasis</span><span style="color: #4d4d4d; font-size: 100%;"> make insights accessible to everyone.</span></div>   

- Make use of **pre-attentive focus** (Things that *pop* out)
- Possible highlights: color, size, shape, arrows, ...

## Highlight the main message

Highlight focus contries, de-emphasize all others

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: highlight-countries
#| cache: false

barplot_highlights_1 <- gapminder_china_india |>
  filter(year == max(year)) |>
  ggplot(aes(x = reorder(country, gdpPercap), y = gdpPercap, fill = highlight)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  scale_fill_manual(values = c("China" = okabe_ito[1], "India" = okabe_ito[1], "Rest of Asia" = "grey70")) +
  theme_minimal() +
  labs(
    y = "GDP per Capita ($)",
    title = "China and India still below average GDP"
  ) +
  annotate(
    "text",
    x = 2,
    y = avg_gdp + 3200,
    label = paste(c("Mean:", format(avg_gdp, big.mark = ","), "$"), collapse = ""),
    size = 4
  ) +
  geom_hline(yintercept = avg_gdp) +
  scale_y_continuous(expand = c(0, 0.01)) +
  coord_flip() +
  theme_minimal() +
  theme(
    axis.title.y = element_blank(),
    panel.grid.major.y = element_blank(),
    axis.line.x = element_line(),
    axis.ticks.x = element_line()
  )

barplot_highlights_1
```

## Highlight the main message

Highlight focus contries, de-emphasize all others

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: highlight-countries-2
#| cache: false

barplot_highlights_2 <- gapminder_china_india |>
  filter(year == max(year)) |>
  ggplot(aes(x = reorder(country, gdpPercap), y = gdpPercap, fill = highlight)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  scale_fill_manual(values = c("China" = okabe_ito[1], "India" = okabe_ito[2], "Rest of Asia" = "grey70")) +
  theme_minimal() +
  labs(
    title = sprintf(
      "<span style='color:%s; font-weight: bold;'>China</span> and <span style='color:%s;font-weight: bold;'>India</span> still below average GDP",
      highlight_colors["China"], highlight_colors["India"]
    ),
    y = "GDP per Capita ($)",
  ) +
  annotate(
    "text",
    x = 2,
    y = avg_gdp + 3200,
    label = paste(c("Mean:", format(avg_gdp, big.mark = ","), "$"), collapse = ""),
    size = 4
  ) +
  geom_hline(yintercept = avg_gdp) +
  scale_y_continuous(expand = c(0, 0.01)) +
  coord_flip() +
  theme_minimal() +
  theme(
    axis.title.y = element_blank(),
    panel.grid.major.y = element_blank(),
    axis.line.x = element_line(),
    axis.ticks.x = element_line(),
    plot.title = ggtext::element_markdown()
  )

barplot_highlights_2
```

## Order your data

Order categories consciously not automatically.

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: order-categories
#| cache: true
order_gdp <- gapminder_china_india |>
  filter(year == max(year)) |>
  ggplot(aes(x = reorder(country, gdpPercap), y = gdpPercap)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  ggtitle("Ordered by GDP")


# ordered alphabetially
order_alphabetically <- gapminder_china_india |>
  filter(year == max(year)) |>
  ggplot(aes(x = fct_rev(country), y = gdpPercap)) +
  geom_bar(stat = "identity", show.legend = FALSE) +
  ggtitle("Ordered Alphabetically")

# Put them side by side and adjust the theme
order_gdp + order_alphabetically &
  coord_flip() &
  theme_minimal() &
  labs(
    x = "Country",
    y = "GDP per Capita ($)"
  ) &
  scale_y_continuous(expand = c(0.01, 0.01)) &
  theme(
    panel.grid.major.y = element_blank(),
    axis.title.y = element_blank()
  )
```

## Order your data

Order categories consciously not automatically.

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: order-legend
#| cache: true
top_growth <- gapminder |>
  group_by(country) |>
  summarize(gdp_growth = last(gdpPercap) / first(gdpPercap)) |>
  arrange(desc(gdp_growth)) |>
  head(5) |>
  pull(country)

gapminder <- gapminder |>
  mutate(highlight = case_when(
    country %in% top_growth ~ country,
    .default = "Other"
  ))

# define colors
top_5_colors <- c(
  "Equatorial Guinea" = okabe_ito[1],
  "Taiwan" = okabe_ito[2],
  "Korea, Rep." = okabe_ito[3],
  "Singapore" = okabe_ito[4],
  "Botswana" = okabe_ito[5],
  "Other" = "grey90"
)

# With legend
order_legend <- gapminder |>
  filter(highlight != "Other") |>
  mutate(
    highlight = fct_relevel(highlight, c(
      "Singapore",
      "Taiwan",
      "Korea, Rep.",
      "Botswana",
      "Equatorial Guinea"
    ))
  ) |>
  ggplot(aes(
    x = year,
    y = gdpPercap,
    group = country
  )) +
  geom_line(data = gapminder |>
    filter(highlight == "Other"), color = "grey70", alpha = 0.2) +
  geom_line(aes(color = highlight), size = 1) +
  scale_color_manual(values = top_5_colors) +
  scale_y_continuous(labels = scales::label_comma()) +
  scale_x_continuous(expand = c(0.01, 0.01)) +
  theme_minimal() +
  labs(
    title = "Top 5 Economic Growth Stories",
    y = "GDP per Capita ($)"
  ) +
  theme(
    legend.title = element_blank(),
    panel.grid.minor = element_blank(),
    axis.title.x = element_blank()
  )
print(order_legend)
```

# 👣 6. Less is more

## The importance of differences

<div style="border: 2px solid #ccc; padding: 0.5em; border-radius: 4px;"><span style="font-size: 90%; font-style: italic; color: #8B4513;">Effective</span> <span style="color: #4169E1; font-size: 115%; font-weight: bold;">visualization</span> <span style="color: #FF69B4;">helps</span> <span style="font-style: italic;">us</span> <span style="font-size: 110%; color: #9932CC;">understand</span> <span style="font-size: 85%;">data</span> <span style="color: #CD853F; font-style: italic;">quickly.</span> <span style="color: #4169E1; font-size: 120%; font-weight: bold;">Patterns</span> <span style="color: #FF4500; font-size: 110%;">emerge</span> <span style="font-size: 95%; color: #4682B4;">naturally,</span> <span style="font-style: italic; color: #DA70D6; font-weight: bold;">while</span> <span style="color: #4169E1; font-size: 120%; font-weight: bold;">colors</span> <span style="color: #20B2AA; font-size: 105%;">enhance</span> <span style="font-size: 115%; color: #CD5C5C;">meaning.</span> <span style="font-style: italic; color: #4B0082;">Good</span> <span style="color: #4169E1; font-size: 120%; font-weight: bold;">design</span> <span style="color: #8FBC8F; font-size: 110%;">choices</span> <span style="font-style: italic; color: #B8860B;">and</span> <span style="font-size: 95%;">proper</span> <span style="color: #4169E1; font-size: 120%; font-weight: bold;">emphasis</span> <span style="color: #6A5ACD; font-size: 105%;font-weight: bold;">make</span> <span style="font-style: italic; color: #FF7F50;">insights</span> <span style="color: #9370DB;">accessible</span> <span style="font-size: 90%; color: #556B2F;font-weight: bold;">to</span> <span style="font-style: italic; color: #8B008B;">everyone.</span></div>  

<br>

. . .

<div style="border: 2px solid #ccc; padding: 0.5em; border-radius: 4px;"><span style="color: #4d4d4d; font-size: 120%;">Effective visualization helps us understand data quickly. </span><span style="color: #4169E1; font-size: 120%; font-weight: bold;">Patterns</span><span style="color: #4d4d4d; font-size: 120%;"> emerge naturally, while </span><span style="color: #4169E1; font-size: 120%; font-weight: bold;">colors</span><span style="color: #4d4d4d; font-size: 120%;"> enhance meaning. Good </span><span style="color: #4169E1; font-size: 120%; font-weight: bold;">design</span><span style="color: #4d4d4d; font-size: 120%;"> choices and proper </span><span style="color: #4169E1; font-size: 120%; font-weight: bold;">emphasis</span><span style="color: #4d4d4d; font-size: 120%;"> make insights accessible to everyone.</span></div>   

## The importance of differences

Use differences to **communicate not to decorate**

. . .

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: differences-to-communicate
#| cache: false

fill_country <- gapminder_china_india |>
  filter(year == max(year)) |>
  ggplot(aes(x = reorder(country, gdpPercap), y = gdpPercap, fill = country)) +
  geom_bar(stat = "identity", show.legend = FALSE)

fill_amount <- gapminder_china_india |>
  filter(year == max(year)) |>
  ggplot(aes(x = reorder(country, gdpPercap), y = gdpPercap)) +
  geom_bar(stat = "identity", show.legend = FALSE, fill = "blue4")

# Put them side by side and adjust the theme
fill_country + fill_amount &
  coord_flip() &
  theme_minimal() &
  labs(
    x = "Country",
    y = "GDP per Capita ($)"
  ) &
  scale_y_continuous(expand = c(0.01, 0.01)) &
  theme(
    panel.grid.major.y = element_blank(),
    axis.title.y = element_blank()
  )
```

## Declutter your figure

- Try to maximize the **data/ink ratio**
- This is to an extent a matter of taste
- Remove redundant figure elements
  - Excessive grid lines
  - Boxes
  - Duplicate text ...
- But keep elements important for reading

## Declutter your graphs

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: declutter
#| cache: false

# Cluttered plot with default theme and extra annotations
cluttered_ts <- ggplot(economics, aes(x = date, y = unemploy)) +
  geom_line() +
  labs(
    x = "Year",
    y = "Number of Unemployed (in thousands)",
    title = "Time Series of Unemployment in the US",
    caption = "Data Source: Federal Reserve Economic Data (FRED)"
  ) +
  scale_x_date(date_breaks = "5 years", date_labels = "%Y") +
  scale_y_continuous(breaks = c(4000, 6000, 8000, 10000, 12000, 14000)) +
  theme(
    panel.background = element_rect(color = "black"),
    axis.text.x = element_text(angle = 45, hjust = 1)
  )

# Decluttered, minimal time series plot
clean_ts <- ggplot(economics, aes(x = date, y = unemploy)) +
  geom_line() +
  scale_y_continuous(labels = scales::label_comma(scale = 1, suffix = "k")) +
  labs(
    x = "Date",
    y = "Number of Unemployed",
    title = "Time Series of Unemployment in the US",
    caption = "Data Source: Federal Reserve Economic Data (FRED)"
  ) +
  theme_minimal() +
  theme(
    axis.title.x = element_blank(),
    axis.line.x = element_line(),
    axis.ticks.x = element_line(),
    panel.grid.minor = element_blank(),
    panel.grid.major.x = element_blank(),
    # transparent background
    plot.background = element_rect(fill = "transparent", color = NA),
    panel.background = element_rect(fill = "transparent", color = NA)
  )

cluttered_ts + clean_ts
```

# 👣 7: Make it accessible

## Element size

- Make sure your elements are big enough<br>Text size, Linewidth, Point size
- Depends on the context

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: element-size
#| cache: false
#| fig-height: 4

lollipop_base <- ggplot(
  penguin_counts,
  aes(x = species, y = n, color = species)
) +
  scale_color_manual(values = okabe_ito) +
  labs(
    title = "Penguins in Antarctica",
    y = "Count"
  ) +
  coord_flip() +
  scale_y_continuous(expand = c(0.03, 0.03)) +
  theme_minimal() +
  theme(
    axis.line.y = element_blank(),
    panel.grid.major.y = element_blank(),
    axis.title.y = element_blank(),
    axis.text.y = element_text(hjust = 1),
    legend.position = "none",
    axis.line.x = element_line()
  )

lollipop_small <- lollipop_base +
  # Add segment lines
  geom_segment(
    aes(x = species, xend = species, y = 0, yend = n, color = species),
    linewidth = 0.5
  ) +
  # Add points
  geom_point(size = 2) +
  geom_text(
    aes(label = percentage),
    size = 2,
    fontface = "bold",
    hjust = 1.5,
    vjust = -1
  ) +
  theme(
    plot.title = element_text(size = 8),
    axis.title.x = element_text(size = 6)
  )



lollipop_big <- lollipop_base +
  # Add segment lines
  geom_segment(
    aes(x = species, xend = species, y = 0, yend = n, color = species),
    linewidth = 2
  ) +
  # Add points
  geom_point(size = 6) +
  geom_text(
    aes(label = percentage),
    size = 5,
    fontface = "bold",
    hjust = 1.5,
    vjust = -1
  ) +
  theme(
    axis.text = element_text(size = 12),
    axis.title.x = element_text(size = 14),
    plot.title = element_text(size = 16)
  )

# combine
lollipop_small + lollipop_big &
  theme(
    # transparent background
    plot.background = element_rect(fill = "transparent", color = NA),
    panel.background = element_rect(fill = "transparent", color = NA)
  )
```

## Contrast

Make sure that the contrast is high enough

![[Blogpost on colors](https://www.datawrapper.de/blog/colors) by Lisa Charlotte Muth (Datawrapper)](images/2025_04_17_data-visualisation/contrast.png)

- Use tools to check contrast, e.g. <br>[https://snook.ca/technical/colour_contrast](https://snook.ca/technical/colour_contrast)

## Color

Use logical/intuitive colors

![[Blogpost on colors](https://www.datawrapper.de/blog/colors) by Lisa Charlotte Muth (Datawrapper)](images/2025_04_17_data-visualisation/intuitive_colors.png)

## Color

Choose colorblind friendly palettes (if in doubt: test!).

![Use the [Viz Palette tool](https://projects.susielu.com/viz-palette) to test for color blindness](images/2025_04_17_data-visualisation/viz_palette.png){width="70%"}

## Add redundancy

Redundancy increases the chance that everyone can see the difference!

```{r, dev='svg', dev.args=list(bg="transparent")}
#| label: add-redundancy
#| cache: false

flipper_bill <- ggplot(
  data = palmerpenguins::penguins,
  aes(
    x = flipper_length_mm,
    y = bill_length_mm
  )
) +
  geom_point(
    aes(
      color = species,
      shape = species
    ),
    size = 3,
    alpha = 0.8
  ) +
  scale_color_manual(values = c("darkorange", "purple", "cyan4")) +
  labs(
    title = "Flipper and bill length",
    subtitle = "Dimensions for Adelie, Chinstrap and Gentoo Penguins at Palmer Station LTER",
    x = "Flipper length (mm)",
    y = "Bill length (mm)",
    color = "Penguin species",
    shape = "Penguin species"
  ) +
  theme_minimal() +
  theme(
    legend.position = c(0.85, 0.15),
    plot.title.position = "plot",
    plot.caption = element_text(hjust = 0, face = "italic"),
    plot.caption.position = "plot"
  )

flipper_bill
```

## Summary

1. Consider the **context**
2. Make your data **transparent**
3. Choose the **right chart type**
4. Focus on the **core message**
5. Consider the **trip**
6. **Less is more**
7. Make it **accessible**

. . .

Start analyzing these points in yours and other people's plots.

## Next lecture

#### Topic t.b.a.

<br>

:date: 15th May :clock3: 3 - 4 p.m. :round_pushpin: Webex

:bell: [Subscribe to the mailing list](https://lists.fu-berlin.de/listinfo/toolsAndTips)

:e-mail: For topic suggestions and/or feedback [send me an email](mailto:selina.baldauf@fu-berlin.de)

## Thank you for your attention :)

Questions?<br>


## References

:::{.nonincremental}


:::
